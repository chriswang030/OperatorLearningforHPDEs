function ivp_experiment(tree,data,N)
%% IVP_EXPERIMENT
%   Attempt to solve an inhomogeneous IVP using the approximate Green's
%   function generated by CONSTRUCT. Solution plotted against the same IVP
%   solved numerically using SOLVE_UW1.
% 
%   Input:
%   * tree : integer array with tree structure
%   * data : cell array with stored SVDs of low-rank blocks
%   * N    : side length of the matrix representing each block, so that
%            cells of DATA store SVDs of N^2 x N^2 matrices

% fix initial condition
du0 = @(x) (0.2<x & x<0.3);

% setup for UW1
a = @(x) 4*ones(size(x)); % wavespeed coefficient
Nx = 101;   % number of space gridpoints
Nt = 251;   % number of time gridpoints; consider CFL condition
x = linspace(0,1,Nx);
t = linspace(0,1,Nt);

% solve
u = solve_uw1(a(x),zeros(Nx,Nt),zeros(Nx,1),du0(x));

% setup for using approximate Green's function
M = 201;    % use equal number of gridpoints in both directions
Xq = linspace(0,1,M);
Tq = linspace(0,1,M);

% set forcing term to be approximation of Dirac on {t=0}, matching du0
f = @(x,t) 400 * du0(x) .* (t<0.0025);

% solve
Vq = hmtimes(tree,data,N,f,Xq,Tq,1);
Vq = inpaint_nans(Vq);

% plots
tl = tiledlayout(1,2);
h(1) = nexttile;
contourf(Xq,Tq,Vq,EdgeColor='none');

h(2) = nexttile;
contourf(x,t,u',EdgeColor='none');
colorbar;
